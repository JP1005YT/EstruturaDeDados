<?php
    include_once './../../backend/classes/Usuario.php';
    session_start();

    spl_autoload_register(function ($class_name) {
        include './../../backend/classes/' . $class_name . '.php';
    });
    
?>
<!DOCTYPE html>
<html lang="pt-BR">
    <head>
        <meta charset='utf-8'>
        <meta http-equiv='X-UA-Compatible' content='IE=edge'>
        <title> DataStruct School | Home</title>
        <meta name='viewport' content='width=device-width, initial-scale=1'>
        <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
        <link rel='stylesheet' type='text/css' media='screen' href='main.css'>
        <link rel="shortcut icon" href="./../../logo.png" />
    </head>
    <body>
    <header class="mainHeader">
        <div class="logo">
            <img src="./../../logo.png" height="70px">
            <h1>DataStruct School</h1>
        </div>
        <nav>
            <ul>
                <li>
                    <a href="./../../index.php">P√°gina Principal</a>
                </li>
                <li>Temas</li>
            </ul>
            <?php
                if(isset($_SESSION['user'])){
                    $user = $_SESSION['user'];
                    echo '<section class="logged" onclick="dropdown()">
                            <section class="content">
                                '.$user->getUsername() .'
                                <i class="bx bxs-chevron-down" id="icon"></i>
                            </section>
                            <section class="dropdown">
                                <ul>
                                    <li>Perfil</li>
                                    
                                    <li>
                                        <a href="./backend/functions/sair.php">Sair</a>
                                    </li>
                                </ul>
                            </section>
                        </section>';
                }else{
                    echo '<section>
                            <button class="cadastrar" onclick="switchPages('."'../../pages/Cadastrar/'".')"">Cadastrar-se</button>
                            <button class="entrar" onclick="switchPages('."'../../pages/Entrar/'".')">Entrar</button>
                        </section>';
                }
            ?>
        </nav>
    </header>
    <main>
        <section class="card">
            <h1>Bem-vindo ao Mundo M√°gico das Estruturas de Dados!</h1>
            <section>
                <h2>O que s√£o Estruturas de Dados?</h2>
                <p>
                    Imagine que voc√™ tem um ba√∫ do tesouro cheio de brinquedos. Voc√™ n√£o vai querer jogar tudo l√° de qualquer jeito, certo? 
                    Voc√™ vai querer organizar seus brinquedos para que possa encontrar o que quiser rapidamente. No mundo da programa√ß√£o, 
                    usamos algo chamado "estruturas de dados" para organizar nossos tesouros, que s√£o os dados! Assim como voc√™ organiza seus 
                    brinquedos, os programadores organizam os dados para que possam usar e encontrar o que precisam de forma f√°cil e r√°pida.
                </p>
                <p>
                    Estruturas de dados s√£o fundamentais em programa√ß√£o porque permitem armazenar, acessar e gerenciar dados de forma eficiente. 
                    Elas s√£o usadas em quase todos os programas de computador para melhorar o desempenho e a organiza√ß√£o do c√≥digo. 
                    Sem estruturas de dados, seria muito dif√≠cil lidar com grandes quantidades de informa√ß√£o de maneira r√°pida e eficaz.
                </p>
            </section>
            <section>
                <h2>Exemplos Divertidos de Estruturas de Dados</h2>
                <section class="example">
                    <h3>1. Pilha de Panquecas ü•û</h3>
                    <p>
                        Uma pilha √© como uma pilha de panquecas. Voc√™ coloca a primeira panqueca no prato, depois coloca outra por cima, e outra, 
                        e outra... Quando voc√™ vai comer, voc√™ come√ßa pela panqueca do topo! Isso √© o que chamamos de "LIFO" - Last In, First Out 
                        (√öltimo a Entrar, Primeiro a Sair).
                    </p>
                    <pre>
                        <code>
                            using System;
                            using System.Collections.Generic;

                            class PilhaDePanquecas {
                                static void Main() {
                                    Stack<string> pilha = new Stack<string>();
                                    pilha.Push("Panqueca 1");
                                    pilha.Push("Panqueca 2");
                                    pilha.Push("Panqueca 3");
                                    
                                    Console.WriteLine(pilha.Pop()); // Panqueca 3
                                    Console.WriteLine(pilha.Pop()); // Panqueca 2
                                }
                            }
                        </code>
                    </pre>
                </section>
                <section class="example">
                    <h3>2. Fila do Tobog√£ üèä</h3>
                    <p>
                        Uma fila √© como esperar na fila para o tobog√£ na piscina. A primeira pessoa que chega √© a primeira a descer pelo tobog√£. 
                        E a √∫ltima pessoa que chega ter√° que esperar sua vez. Isso √© "FIFO" - First In, First Out (Primeiro a Entrar, Primeiro a Sair).
                    </p>
                    <pre>
                        <code>
                            using System;
                            using System.Collections.Generic;

                            class FilaDoTobog√£ {
                                static void Main() {
                                    Queue<string> fila = new Queue<string>();
                                    fila.Enqueue("Pessoa 1");
                                    fila.Enqueue("Pessoa 2");
                                    fila.Enqueue("Pessoa 3");
                                    
                                    Console.WriteLine(fila.Dequeue()); // Pessoa 1
                                    Console.WriteLine(fila.Dequeue()); // Pessoa 2
                                }
                            }
                        </code>
                    </pre>
            </section>
            <section class="example">
                <h3>3. Caixa de Brinquedos üß∏</h3>
                <p>
                    Uma lista √© como sua caixa de brinquedos onde voc√™ pode pegar qualquer brinquedo que quiser, n√£o importa se est√° no topo, no 
                    meio ou no fundo. Voc√™ pode at√© mesmo colocar um novo brinquedo onde quiser!
                </p>
                <pre>
                    <code>
                        using System;
                        using System.Collections.Generic;

                        class CaixaDeBrinquedos {
                            static void Main() {
                                List<string> caixa = new List<string>();
                                caixa.Add("Carrinho");
                                caixa.Add("Boneca");
                                caixa.Add("Bola");
                                
                                Console.WriteLine(caixa[0]); // Carrinho
                                Console.WriteLine(caixa[2]); // Bola
                            }
                        }
                    </code>
                </pre>
            </section>
        </section>
    </section>

    <section class="card">
        <h1>Caixa M√°gica de Brinquedos - TAD (Tipo Abstrato de Dados)</h1>
        <section>
            <h2>O que √© uma Caixa M√°gica?</h2>
            <p>
                Imagine que voc√™ tem uma caixa m√°gica onde voc√™ pode guardar seus brinquedos favoritos. Mas essa n√£o √© uma caixa comum; ela tem 
                regras especiais sobre como voc√™ pode colocar e tirar brinquedos dela. Essa caixa m√°gica √© o que os adultos chamam de TAD, ou Tipo 
                Abstrato de Dados. Ela ajuda a manter seus brinquedos organizados e prontos para brincar sempre que voc√™ quiser!
            </p>
            <p>
                Um TAD √© uma maneira de organizar dados de forma estruturada e eficiente. √â muito importante na programa√ß√£o porque permite que 
                voc√™ manipule dados de uma forma consistente, independentemente de como eles s√£o implementados por tr√°s das cenas. Pense no TAD 
                como as regras de um jogo: ele define como voc√™ pode jogar, mas n√£o se preocupa com os detalhes internos.
            </p>
        </section>
        <section>
            <h2>Brincando com a Caixa M√°gica</h2>
            <p>
                Vamos ver como voc√™ pode brincar com duas caixas m√°gicas diferentes: a Caixa de Empilhar e a Caixa de Enfileirar. Essas caixas 
                m√°gicas s√£o exemplos de como voc√™ pode organizar e acessar dados de maneiras diferentes.
            </p>
        </section>
        <section class="example">
            <h3>Caixa de Empilhar</h3>
            <p>
                A Caixa de Empilhar √© como uma torre de blocos. Voc√™ coloca um bloco em cima do outro, e quando quer brincar, voc√™ s√≥ pode pegar 
                o bloco do topo! √â uma maneira divertida de brincar, mas voc√™ precisa seguir as regras da caixa.
            </p>
            <pre>
                <code>
                    // Exemplo em C#
                    public class CaixaDeEmpilhar {
                        private Stack<int> pilha = new Stack<int>();

                        public void Colocar(int bloco) {
                            pilha.Push(bloco);
                        }

                        public int Pegar() {
                            if (pilha.Count > 0)
                                return pilha.Pop();
                            else
                                throw new InvalidOperationException("A pilha est√° vazia!");
                        }

                        public bool EstaVazia() {
                            return pilha.Count == 0;
                        }

                        public int OlharTopo() {
                            if (pilha.Count > 0)
                                return pilha.Peek();
                            else
                                throw new InvalidOperationException("A pilha est√° vazia!");
                        }
                    }
                </code>
            </pre>
        </section>
        <section class="example">
            <h3>Caixa de Enfileirar</h3>
            <p>
                A Caixa de Enfileirar √© como uma fila para o escorregador. Voc√™ entra na fila e espera sua vez. Quando √© sua vez, voc√™ pode brincar! 
                E lembre-se, quem chega primeiro, brinca primeiro.
            </p>
            <pre>
                <code>
                    // Exemplo em C#
                    public class CaixaDeEnfileirar {
                        private Queue<int> fila = new Queue<int>();

                        public void EntrarNaFila(int brinquedo) {
                            fila.Enqueue(brinquedo);
                        }

                        public int Brincar() {
                            if (fila.Count > 0)
                                return fila.Dequeue();
                            else
                                throw new InvalidOperationException("A fila est√° vazia!");
                        }

                        public bool EstaVazia() {
                            return fila.Count == 0;
                        }
                    }
                </code>
            </pre>
        </section>
    </section>

    <section class="card">
        <h1>Listas Simplesmente Encadeadas</h1>
        <section>
            <h2>O que √© uma Lista Simplesmente Encadeada?</h2>
            <p>
                Imagine que voc√™ tem uma fila de amigos, e cada amigo est√° segurando a m√£o do pr√≥ximo amigo na fila. 
                Esta √© uma maneira f√°cil de pensar em uma lista simplesmente encadeada. Cada amigo √© um "n√≥" na lista, 
                e a m√£o que eles est√£o segurando √© a "liga√ß√£o" para o pr√≥ximo n√≥.
            </p>
            <p>
                As listas simplesmente encadeadas s√£o importantes na programa√ß√£o porque permitem armazenar e organizar dados de forma eficiente. 
                Elas s√£o usadas quando voc√™ precisa de uma estrutura de dados que pode crescer ou diminuir dinamicamente, sem precisar de um 
                tamanho fixo. Al√©m disso, elas facilitam a inser√ß√£o e remo√ß√£o de elementos em qualquer ponto da lista.
            </p>
        </section>
        <section>
            <h2>Como Funciona?</h2>
            <p>
                Vamos ver como essa fila de amigos funciona e como voc√™ pode brincar com ela. Vamos explorar algumas opera√ß√µes b√°sicas que voc√™ 
                pode realizar em uma lista simplesmente encadeada.
            </p>
            <section class="example">
                <h3>Adicionando um Amigo ao Final</h3>
                <p>
                    Quando voc√™ quer adicionar um novo amigo ao final da fila, voc√™ pede ao √∫ltimo amigo que segure a m√£o do novo amigo. 
                    Agora, o novo amigo √© o √∫ltimo da fila!
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class No {
                            public int Valor;
                            public No Proximo;

                            public No(int valor) {
                                Valor = valor;
                                Proximo = null;
                            }
                        }

                        public class ListaSimplesmenteEncadeada {
                            private No primeiro;

                            public ListaSimplesmenteEncadeada() {
                                primeiro = null;
                            }

                            public void AdicionarAmigoAoFinal(int valor) {
                                No novoNo = new No(valor);
                                if (primeiro == null) {
                                    primeiro = novoNo;
                                } else {
                                    No atual = primeiro;
                                    while (atual.Proximo != null) {
                                        atual = atual.Proximo;
                                    }
                                    atual.Proximo = novoNo;
                                }
                            }
                        }
                    </code>
                </pre>
            </section>
            <section class="example">
                <h3>Adicionando um Amigo ao In√≠cio</h3>
                <p>
                    Quando voc√™ quer adicionar um novo amigo ao in√≠cio da fila, o novo amigo segura a m√£o do amigo que estava na frente, 
                    e agora ele √© o primeiro da fila!
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class ListaSimplesmenteEncadeada {
                            private No primeiro;

                            public ListaSimplesmenteEncadeada() {
                                primeiro = null;
                            }

                            public void AdicionarAmigoAoInicio(int valor) {
                                No novoNo = new No(valor);
                                novoNo.Proximo = primeiro;
                                primeiro = novoNo;
                            }
                        }
                    </code>
                </pre>
            </section>
            <section class="example">
                <h3>Adicionando um Amigo no Meio</h3>
                <p>
                    Quando voc√™ quer adicionar um novo amigo no meio da fila, voc√™ pede ao amigo que est√° no meio para segurar a m√£o do novo amigo, 
                    e o novo amigo segura a m√£o do pr√≥ximo amigo. Agora, ele est√° no meio da fila!
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class ListaSimplesmenteEncadeada {
                            private No primeiro;

                            public ListaSimplesmenteEncadeada() {
                                primeiro = null;
                            }

                            public void AdicionarAmigoNoMeio(int valor, int posicao) {
                                No novoNo = new No(valor);
                                if (posicao == 0) {
                                    AdicionarAmigoAoInicio(valor);
                                } else {
                                    No atual = primeiro;
                                    for (int i = 0; i < posicao - 1 && atual != null; i++) {
                                        atual = atual.Proximo;
                                    }
                                    if (atual != null) {
                                        novoNo.Proximo = atual.Proximo;
                                        atual.Proximo = novoNo;
                                    } else {
                                        throw new ArgumentOutOfRangeException("Posi√ß√£o inv√°lida!");
                                    }
                                }
                            }
                        }
                    </code>
                </pre>
            </section>
            <section class="example">
                <h3>Brincando com a Fila</h3>
                <p>
                    Se voc√™ quiser saber quem √© o primeiro amigo na fila, voc√™ simplesmente pergunta ao amigo que est√° na frente.
                    E se quiser saber quem vem depois, √© s√≥ perguntar a cada amigo quem eles est√£o segurando a m√£o.
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class ListaSimplesmenteEncadeada {
                            // ... (outros m√©todos)

                            public No VerPrimeiroAmigo() {
                                return primeiro;
                            }

                            public No VerProximoAmigo(No atualAmigo) {
                                return atualAmigo?.Proximo;
                            }
                        }
                    </code>
                </pre>
            </section>
        </section>
    </section>

    <section class="card">
        <h1>Listas Duplamente Encadeadas</h1>
        <section>
            <h2>O que √© uma Lista Duplamente Encadeada?</h2>
            <p>
                Imagine que voc√™ tem uma fila de amigos, mas desta vez, cada amigo est√° segurando a m√£o do amigo √† sua frente e tamb√©m do amigo atr√°s dele. 
                Esta √© uma maneira f√°cil de pensar em uma lista duplamente encadeada. Cada amigo √© um "n√≥" na lista, e as m√£os que eles est√£o segurando 
                s√£o as "liga√ß√µes" para o pr√≥ximo e o anterior n√≥.
            </p>
            <p>
                As listas duplamente encadeadas s√£o importantes na programa√ß√£o porque oferecem mais flexibilidade do que as listas simplesmente encadeadas. 
                Elas permitem que voc√™ navegue tanto para frente quanto para tr√°s na lista, facilitando a inser√ß√£o e remo√ß√£o de elementos em qualquer posi√ß√£o. 
                Elas s√£o usadas em diversas aplica√ß√µes, como na implementa√ß√£o de navegadores (para manter o hist√≥rico de navega√ß√£o), em sistemas de gerenciamento 
                de mem√≥ria, e em muitas outras situa√ß√µes onde o acesso bidirecional √© necess√°rio.
            </p>
        </section>
        <section>
            <h2>Como Funciona?</h2>
            <p>
                Vamos ver como essa fila de amigos funciona e como voc√™ pode brincar com ela. Vamos explorar algumas opera√ß√µes b√°sicas que voc√™ 
                pode realizar em uma lista duplamente encadeada.
            </p>
            <section class="example">
                <h3>Adicionando um Amigo ao Final</h3>
                <p>
                    Quando voc√™ quer adicionar um novo amigo ao final da fila, voc√™ pede ao √∫ltimo amigo que segure a m√£o do novo amigo. 
                    O novo amigo ent√£o segura a m√£o do √∫ltimo amigo e agora eles s√£o amigos!
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class No {
                            public int Valor;
                            public No Proximo;
                            public No Anterior;

                            public No(int valor) {
                                Valor = valor;
                                Proximo = null;
                                Anterior = null;
                            }
                        }

                        public class ListaDuplamenteEncadeada {
                            private No primeiro;
                            private No ultimo;

                            public ListaDuplamenteEncadeada() {
                                primeiro = null;
                                ultimo = null;
                            }

                            public void AdicionarAmigoAoFinal(int valor) {
                                No novoNo = new No(valor);
                                if (primeiro == null) {
                                    primeiro = novoNo;
                                    ultimo = novoNo;
                                } else {
                                    ultimo.Proximo = novoNo;
                                    novoNo.Anterior = ultimo;
                                    ultimo = novoNo;
                                }
                            }
                        }
                    </code>
                </pre>
            </section>
            <section class="example">
                <h3>Adicionando um Amigo ao In√≠cio</h3>
                <p>
                    Quando voc√™ quer adicionar um novo amigo ao in√≠cio da fila, o novo amigo segura a m√£o do primeiro amigo, 
                    e agora ele √© o primeiro da fila!
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class ListaDuplamenteEncadeada {
                            private No primeiro;
                            private No ultimo;

                            public ListaDuplamenteEncadeada() {
                                primeiro = null;
                                ultimo = null;
                            }

                            public void AdicionarAmigoAoInicio(int valor) {
                                No novoNo = new No(valor);
                                if (primeiro == null) {
                                    primeiro = novoNo;
                                    ultimo = novoNo;
                                } else {
                                    novoNo.Proximo = primeiro;
                                    primeiro.Anterior = novoNo;
                                    primeiro = novoNo;
                                }
                            }
                        }
                    </code>
                </pre>
            </section>
            <section class="example">
                <h3>Adicionando um Amigo no Meio</h3>
                <p>
                    Quando voc√™ quer adicionar um novo amigo no meio da fila, voc√™ pede ao amigo que est√° no meio para segurar a m√£o do novo amigo, 
                    e o novo amigo segura a m√£o do pr√≥ximo amigo. Agora, ele est√° no meio da fila!
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class ListaDuplamenteEncadeada {
                            private No primeiro;
                            private No ultimo;

                            public ListaDuplamenteEncadeada() {
                                primeiro = null;
                                ultimo = null;
                            }

                            public void AdicionarAmigoNoMeio(int valor, int posicao) {
                                No novoNo = new No(valor);
                                if (posicao == 0) {
                                    AdicionarAmigoAoInicio(valor);
                                } else {
                                    No atual = primeiro;
                                    for (int i = 0; i < posicao - 1 && atual != null; i++) {
                                        atual = atual.Proximo;
                                    }
                                    if (atual != null && atual.Proximo != null) {
                                        novoNo.Proximo = atual.Proximo;
                                        novoNo.Anterior = atual;
                                        atual.Proximo.Anterior = novoNo;
                                        atual.Proximo = novoNo;
                                    } else if (atual == ultimo) {
                                        AdicionarAmigoAoFinal(valor);
                                    } else {
                                        throw new ArgumentOutOfRangeException("Posi√ß√£o inv√°lida!");
                                    }
                                }
                            }
                        }
                    </code>
                </pre>
            </section>
            <section class="example">
                <h3>Brincando com a Fila</h3>
                <p>
                    Se voc√™ quiser saber quem √© o primeiro amigo na fila, voc√™ simplesmente pergunta ao amigo que est√° na frente. 
                    E se quiser saber quem vem depois, ou antes, √© s√≥ perguntar a cada amigo quem eles est√£o segurando a m√£o.
                </p>
                <pre>
                    <code>
                        // Exemplo em C#
                        public class ListaDuplamenteEncadeada {
                            private No primeiro;
                            private No ultimo;

                            public No VerPrimeiroAmigo() {
                                return primeiro;
                            }

                            public No VerUltimoAmigo() {
                                return ultimo;
                            }

                            public No VerProximoAmigo(No atualAmigo) {
                                return atualAmigo?.Proximo;
                            }

                            public No VerAmigoAnterior(No atualAmigo) {
                                return atualAmigo?.Anterior;
                            }
                        }
                    </code>
                </pre>
            </section>
        </section>
    </section>

    </main>
    <script>
        let i = 0
        function switchCarrossel(){
            const alldivs = document.querySelectorAll(".carrossel div")
            const makers = document.querySelectorAll(".marker i")
            makers.forEach(i => {
                i.id = ""
            })
            alldivs.forEach(div => {  
                div.classList.value = ""
            })
            alldivs[i].classList.add('active')
            makers[i].id = 'active'
            if(i < 2){
                i++
            }else{
                i = 0
            }
        }
        function switchPages(url){
            window.location.href = url
        }
        function dropdown(){
            document.querySelector(".logged").classList.toggle("active")
            document.querySelector("#icon").classList.toggle("active")
        }
        setInterval(switchCarrossel,7000)
    </script>
    </body>
</html>