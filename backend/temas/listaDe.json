{
    "nome":"Listas Duplamente Encadeada",
    "content":"\n        <h1>Listas Duplamente Encadeadas</h1>\n        <section>\n            <h2>O que é uma Lista Duplamente Encadeada?</h2>\n            <p>\n                Imagine que você tem uma fila de amigos, mas desta vez, cada amigo está segurando a mão do amigo à sua frente e também do amigo atrás dele. \n                Esta é uma maneira fácil de pensar em uma lista duplamente encadeada. Cada amigo é um \"nó\" na lista, e as mãos que eles estão segurando \n                são as \"ligações\" para o próximo e o anterior nó.\n            </p>\n            <p>\n                As listas duplamente encadeadas são importantes na programação porque oferecem mais flexibilidade do que as listas simplesmente encadeadas. \n                Elas permitem que você navegue tanto para frente quanto para trás na lista, facilitando a inserção e remoção de elementos em qualquer posição. \n                Elas são usadas em diversas aplicações, como na implementação de navegadores (para manter o histórico de navegação), em sistemas de gerenciamento \n                de memória, e em muitas outras situações onde o acesso bidirecional é necessário.\n            </p>\n        </section>\n        <section>\n            <h2>Como Funciona?</h2>\n            <p>\n                Vamos ver como essa fila de amigos funciona e como você pode brincar com ela. Vamos explorar algumas operações básicas que você \n                pode realizar em uma lista duplamente encadeada.\n            </p><img src='../../src/listaduplamenteencadeada.png' class='imagem'>\n            <section class=\"example\">\n                <h3>Adicionando um Amigo ao Final</h3>\n                <p>\n                    Quando você quer adicionar um novo amigo ao final da fila, você pede ao último amigo que segure a mão do novo amigo. \n                    O novo amigo então segura a mão do último amigo e agora eles são amigos!\n                </p>\n                <pre>                    <code>\n                        // Exemplo em C#\n                        public class No {\n                            public int Valor;\n                            public No Proximo;\n                            public No Anterior;\n\n                            public No(int valor) {\n                                Valor = valor;\n                                Proximo = null;\n                                Anterior = null;\n                            }\n                        }\n\n                        public class ListaDuplamenteEncadeada {\n                            private No primeiro;\n                            private No ultimo;\n\n                            public ListaDuplamenteEncadeada() {\n                                primeiro = null;\n                                ultimo = null;\n                            }\n\n                            public void AdicionarAmigoAoFinal(int valor) {\n                                No novoNo = new No(valor);\n                                if (primeiro == null) {\n                                    primeiro = novoNo;\n                                    ultimo = novoNo;\n                                } else {\n                                    ultimo.Proximo = novoNo;\n                                    novoNo.Anterior = ultimo;\n                                    ultimo = novoNo;\n                                }\n                            }\n                        }\n                    </code>\n                </pre>\n            </section>\n            <section class=\"example\">\n                <h3>Adicionando um Amigo ao Início</h3>\n                <p>\n                    Quando você quer adicionar um novo amigo ao início da fila, o novo amigo segura a mão do primeiro amigo, \n                    e agora ele é o primeiro da fila!\n                </p>\n                <pre>                    <code>\n                        // Exemplo em C#\n                        public class ListaDuplamenteEncadeada {\n                            private No primeiro;\n                            private No ultimo;\n\n                            public ListaDuplamenteEncadeada() {\n                                primeiro = null;\n                                ultimo = null;\n                            }\n\n                            public void AdicionarAmigoAoInicio(int valor) {\n                                No novoNo = new No(valor);\n                                if (primeiro == null) {\n                                    primeiro = novoNo;\n                                    ultimo = novoNo;\n                                } else {\n                                    novoNo.Proximo = primeiro;\n                                    primeiro.Anterior = novoNo;\n                                    primeiro = novoNo;\n                                }\n                            }\n                        }\n                    </code>\n                </pre>\n            </section>\n            <section class=\"example\">\n                <h3>Adicionando um Amigo no Meio</h3>\n                <p>\n                    Quando você quer adicionar um novo amigo no meio da fila, você pede ao amigo que está no meio para segurar a mão do novo amigo, \n                    e o novo amigo segura a mão do próximo amigo. Agora, ele está no meio da fila!\n                </p>\n                <pre>                    <code>\n                        // Exemplo em C#\n                        public class ListaDuplamenteEncadeada {\n                            private No primeiro;\n                            private No ultimo;\n\n                            public ListaDuplamenteEncadeada() {\n                                primeiro = null;\n                                ultimo = null;\n                            }\n\n                            public void AdicionarAmigoNoMeio(int valor, int posicao) {\n                                No novoNo = new No(valor);\n                                if (posicao == 0) {\n                                    AdicionarAmigoAoInicio(valor);\n                                } else {\n                                    No atual = primeiro;\n                                    for (int i = 0; i &lt; posicao - 1 &amp;&amp; atual != null; i++) {\n                                        atual = atual.Proximo;\n                                    }\n                                    if (atual != null &amp;&amp; atual.Proximo != null) {\n                                        novoNo.Proximo = atual.Proximo;\n                                        novoNo.Anterior = atual;\n                                        atual.Proximo.Anterior = novoNo;\n                                        atual.Proximo = novoNo;\n                                    } else if (atual == ultimo) {\n                                        AdicionarAmigoAoFinal(valor);\n                                    } else {\n                                        throw new ArgumentOutOfRangeException(\"Posição inválida!\");\n                                    }\n                                }\n                            }\n                        }\n                    </code>\n                </pre>\n            </section>\n            <section class=\"example\">\n                <h3>Brincando com a Fila</h3>\n                <p>\n                    Se você quiser saber quem é o primeiro amigo na fila, você simplesmente pergunta ao amigo que está na frente. \n                    E se quiser saber quem vem depois, ou antes, é só perguntar a cada amigo quem eles estão segurando a mão.\n                </p>\n                <pre>                    <code>\n                        // Exemplo em C#\n                        public class ListaDuplamenteEncadeada {\n                            private No primeiro;\n                            private No ultimo;\n\n                            public No VerPrimeiroAmigo() {\n                                return primeiro;\n                            }\n\n                            public No VerUltimoAmigo() {\n                                return ultimo;\n                            }\n\n                            public No VerProximoAmigo(No atualAmigo) {\n                                return atualAmigo?.Proximo;\n                            }\n\n                            public No VerAmigoAnterior(No atualAmigo) {\n                                return atualAmigo?.Anterior;\n                            }\n                        }\n                    </code>\n                </pre>\n            </section>\n        </section>\n    "
}